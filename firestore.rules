rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get user document
    function getUserDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    // Helper function to check if user is owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check user role
    function hasRole(role) {
      return isAuthenticated() && getUserDoc().role == role;
    }

    // Helper function to check if user can access patient data
    function canAccessPatientData(patientId) {
      let userDoc = getUserDoc();
      return isOwner(patientId) || 
             (hasRole('doctor') && patientId in userDoc.patientIds) ||
             (hasRole('caretaker') && patientId in userDoc.patientIds);
    }

    // Users collection
    match /users/{userId} {
      // Users can read their own document
      // Doctors and caretakers can read their patients' documents
      allow read: if isOwner(userId) || canAccessPatientData(userId);
      
      // Users can only create/update their own document
      allow create, update: if isOwner(userId) && 
                               request.resource.data.keys().hasAll(['id', 'email', 'displayName', 'role', 'createdAt', 'updatedAt']) &&
                               request.resource.data.id == userId &&
                               request.resource.data.email == request.auth.token.email;
      
      // Users can delete their own document
      allow delete: if isOwner(userId);
    }

    // Prescriptions collection
    match /prescriptions/{prescriptionId} {
      // Patients can read their own prescriptions
      // Doctors can read prescriptions they created or for their patients
      // Caretakers can read prescriptions for their patients
      allow read: if isAuthenticated() && (
        resource.data.patientId == request.auth.uid ||
        (hasRole('doctor') && 
         (resource.data.doctorId == request.auth.uid || canAccessPatientData(resource.data.patientId))) ||
        (hasRole('caretaker') && canAccessPatientData(resource.data.patientId))
      );

      // Only doctors can create prescriptions
      // Patients can create their own prescriptions (self-medication)
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll(['id', 'patientId', 'medicationName', 'dosage', 'type', 'frequency', 'reminderTimes', 'startDate', 'isActive', 'createdAt', 'updatedAt']) &&
                       (
                         (hasRole('doctor') && (canAccessPatientData(request.resource.data.patientId) || request.resource.data.doctorId == request.auth.uid)) ||
                         (hasRole('patient') && request.resource.data.patientId == request.auth.uid)
                       );

      // Prescriptions can be updated by their creator or the patient
      allow update: if isAuthenticated() && (
        resource.data.patientId == request.auth.uid ||
        (hasRole('doctor') && resource.data.doctorId == request.auth.uid) ||
        (hasRole('caretaker') && canAccessPatientData(resource.data.patientId))
      );

      // Prescriptions can be deleted by their creator or the patient
      allow delete: if isAuthenticated() && (
        resource.data.patientId == request.auth.uid ||
        (hasRole('doctor') && resource.data.doctorId == request.auth.uid)
      );
    }

    // Medication logs collection
    match /medication_logs/{logId} {
      // Patients can read their own logs
      // Doctors and caretakers can read logs for their patients
      allow read: if isAuthenticated() && canAccessPatientData(resource.data.patientId);

      // Logs can be created by patients, doctors, or caretakers for their patients
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll(['id', 'prescriptionId', 'patientId', 'scheduledTime', 'status', 'createdAt', 'updatedAt']) &&
                       canAccessPatientData(request.resource.data.patientId);

      // Logs can be updated by patients, doctors, or caretakers for their patients
      allow update: if isAuthenticated() && canAccessPatientData(resource.data.patientId);

      // Only the patient or their doctor can delete logs
      allow delete: if isAuthenticated() && (
        resource.data.patientId == request.auth.uid ||
        (hasRole('doctor') && canAccessPatientData(resource.data.patientId))
      );
    }

    // Doctors collection (for doctor profiles and verification)
    match /doctors/{doctorId} {
      // Doctors can read their own profile
      // Patients can read profiles of their doctors
      allow read: if isOwner(doctorId) || 
                     (hasRole('patient') && doctorId in getUserDoc().doctorIds);
      
      // Only the doctor can create/update their own profile
      allow create, update: if isOwner(doctorId) && hasRole('doctor');
      
      // Only the doctor can delete their own profile
      allow delete: if isOwner(doctorId) && hasRole('doctor');
    }

    // Caretakers collection (for caretaker profiles)
    match /caretakers/{caretakerId} {
      // Caretakers can read their own profile
      // Patients can read profiles of their caretakers
      allow read: if isOwner(caretakerId) || 
                     (hasRole('patient') && caretakerId in getUserDoc().caretakerIds);
      
      // Only the caretaker can create/update their own profile
      allow create, update: if isOwner(caretakerId) && hasRole('caretaker');
      
      // Only the caretaker can delete their own profile
      allow delete: if isOwner(caretakerId) && hasRole('caretaker');
    }

    // Deny all other requests
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
