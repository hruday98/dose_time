name: DoseTime CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  FLUTTER_VERSION: '3.16.0'
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # Flutter Tests and Analysis
  flutter_test:
    runs-on: ubuntu-latest
    name: Flutter Test & Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: Get Flutter dependencies
      run: flutter pub get

    - name: Generate code
      run: dart run build_runner build --delete-conflicting-outputs

    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .

    - name: Analyze project source
      run: flutter analyze --fatal-infos

    - name: Run Flutter tests
      run: flutter test --coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        name: flutter-coverage
        fail_ci_if_error: false

  # Build Android APK
  build_android:
    needs: flutter_test
    runs-on: ubuntu-latest
    name: Build Android APK
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: Get Flutter dependencies
      run: flutter pub get

    - name: Generate code
      run: dart run build_runner build --delete-conflicting-outputs

    - name: Build Android APK (Debug)
      if: github.ref == 'refs/heads/develop'
      run: flutter build apk --debug --build-number=${{ github.run_number }}

    - name: Build Android APK (Release)
      if: github.ref == 'refs/heads/main'
      run: flutter build apk --release --build-number=${{ github.run_number }}
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: android-apk
        path: build/app/outputs/flutter-apk/*.apk
        retention-days: 30

  # Deploy to Firebase App Distribution
  firebase_distribution:
    needs: build_android
    runs-on: ubuntu-latest
    name: Firebase App Distribution
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download APK artifact
      uses: actions/download-artifact@v3
      with:
        name: android-apk
        path: ./apk

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: functions/package-lock.json

    - name: Install Firebase CLI
      run: npm install -g firebase-tools

    - name: Deploy to Firebase App Distribution (Develop)
      if: github.ref == 'refs/heads/develop'
      run: |
        firebase appdistribution:distribute ./apk/app-debug.apk \
          --app ${{ secrets.FIREBASE_APP_ID_ANDROID }} \
          --token ${{ secrets.FIREBASE_TOKEN }} \
          --groups "internal-testers" \
          --release-notes "Development build from commit ${{ github.sha }}"

    - name: Deploy to Firebase App Distribution (Production)
      if: github.ref == 'refs/heads/main'
      run: |
        firebase appdistribution:distribute ./apk/app-release.apk \
          --app ${{ secrets.FIREBASE_APP_ID_ANDROID }} \
          --token ${{ secrets.FIREBASE_TOKEN }} \
          --groups "beta-testers" \
          --release-notes "Production build from commit ${{ github.sha }}"

  # Deploy Firebase Functions
  deploy_functions:
    needs: flutter_test
    runs-on: ubuntu-latest
    name: Deploy Firebase Functions
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: functions/package-lock.json

    - name: Install dependencies
      run: |
        cd functions
        npm ci

    - name: Build functions
      run: |
        cd functions
        npm run build

    - name: Install Firebase CLI
      run: npm install -g firebase-tools

    - name: Deploy Firebase Functions
      run: |
        firebase deploy --only functions \
          --token ${{ secrets.FIREBASE_TOKEN }} \
          --project ${{ secrets.FIREBASE_PROJECT_ID }}

    - name: Deploy Firestore Rules
      run: |
        firebase deploy --only firestore:rules \
          --token ${{ secrets.FIREBASE_TOKEN }} \
          --project ${{ secrets.FIREBASE_PROJECT_ID }}

  # Build iOS (if running on macOS runners)
  build_ios:
    needs: flutter_test
    runs-on: macos-latest
    name: Build iOS
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: Get Flutter dependencies
      run: flutter pub get

    - name: Generate code
      run: dart run build_runner build --delete-conflicting-outputs

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Build iOS (Debug)
      if: github.ref == 'refs/heads/develop'
      run: |
        flutter build ios --debug --no-codesign \
          --build-number=${{ github.run_number }}

    - name: Build iOS (Release)
      if: github.ref == 'refs/heads/main'
      run: |
        flutter build ios --release --no-codesign \
          --build-number=${{ github.run_number }}

    - name: Create iOS Archive
      if: github.ref == 'refs/heads/main'
      run: |
        cd ios
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -archivePath Runner.xcarchive \
          archive

    - name: Upload iOS artifact
      uses: actions/upload-artifact@v3
      with:
        name: ios-build
        path: ios/Runner.xcarchive
        retention-days: 30

  # Security and Dependency Scanning
  security_scan:
    runs-on: ubuntu-latest
    name: Security & Dependency Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Setup Flutter for dependency check
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: Get Flutter dependencies
      run: flutter pub get

    - name: Check for outdated dependencies
      run: flutter pub outdated --json > outdated_deps.json || true

    - name: Upload dependency report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-report
        path: outdated_deps.json
        retention-days: 7
